// This file is generated by abnf - DO NOT EDIT.

package rfc3966

import (
	"github.com/ghettovoice/abnf"
	"github.com/ghettovoice/abnf/pkg/abnf_core"
)

var alphanum abnf.Operator

// Alphanum rule: alphanum = ALPHA / DIGIT
func Alphanum(s []byte, ns abnf.Nodes) abnf.Nodes {
	if alphanum == nil {
		alphanum = abnf.Alt(
			"alphanum",
			abnf_core.ALPHA,
			abnf_core.DIGIT,
		)
	}
	return alphanum(s, ns)
}

var context abnf.Operator

// Context rule: context = ";phone-context=" descriptor
func Context(s []byte, ns abnf.Nodes) abnf.Nodes {
	if context == nil {
		context = abnf.Concat(
			"context",
			abnf.Literal("\";phone-context=\"", []byte{59, 112, 104, 111, 110, 101, 45, 99, 111, 110, 116, 101, 120, 116, 61}),
			Descriptor,
		)
	}
	return context(s, ns)
}

var descriptor abnf.Operator

// Descriptor rule: descriptor = domainname / global-number-digits
func Descriptor(s []byte, ns abnf.Nodes) abnf.Nodes {
	if descriptor == nil {
		descriptor = abnf.Alt(
			"descriptor",
			Domainname,
			GlobalNumberDigits,
		)
	}
	return descriptor(s, ns)
}

var domainlabel abnf.Operator

// Domainlabel rule: domainlabel = alphanum / alphanum *( alphanum / "-" ) alphanum
func Domainlabel(s []byte, ns abnf.Nodes) abnf.Nodes {
	if domainlabel == nil {
		domainlabel = abnf.Alt(
			"domainlabel",
			Alphanum,
			abnf.Concat(
				"alphanum *( alphanum / \"-\" ) alphanum",
				Alphanum,
				abnf.Repeat0Inf("*( alphanum / \"-\" )", abnf.Alt(
					"alphanum / \"-\"",
					Alphanum,
					abnf.Literal("\"-\"", []byte{45}),
				)),
				Alphanum,
			),
		)
	}
	return domainlabel(s, ns)
}

var domainname abnf.Operator

// Domainname rule: domainname = *( domainlabel "." ) toplabel [ "." ]
func Domainname(s []byte, ns abnf.Nodes) abnf.Nodes {
	if domainname == nil {
		domainname = abnf.Concat(
			"domainname",
			abnf.Repeat0Inf("*( domainlabel \".\" )", abnf.Concat(
				"domainlabel \".\"",
				Domainlabel,
				abnf.Literal("\".\"", []byte{46}),
			)),
			Toplabel,
			abnf.Optional("[ \".\" ]", abnf.Literal("\".\"", []byte{46})),
		)
	}
	return domainname(s, ns)
}

var escaped abnf.Operator

// Escaped rule: escaped = "%" HEXDIG HEXDIG
func Escaped(s []byte, ns abnf.Nodes) abnf.Nodes {
	if escaped == nil {
		escaped = abnf.Concat(
			"escaped",
			abnf.Literal("\"%\"", []byte{37}),
			abnf_core.HEXDIG,
			abnf_core.HEXDIG,
		)
	}
	return escaped(s, ns)
}

var extension abnf.Operator

// Extension rule: extension = ";ext=" 1*phonedigit
func Extension(s []byte, ns abnf.Nodes) abnf.Nodes {
	if extension == nil {
		extension = abnf.Concat(
			"extension",
			abnf.Literal("\";ext=\"", []byte{59, 101, 120, 116, 61}),
			abnf.Repeat1Inf("1*phonedigit", Phonedigit),
		)
	}
	return extension(s, ns)
}

var globalNumber abnf.Operator

// GlobalNumber rule: global-number = global-number-digits *par
func GlobalNumber(s []byte, ns abnf.Nodes) abnf.Nodes {
	if globalNumber == nil {
		globalNumber = abnf.Concat(
			"global-number",
			GlobalNumberDigits,
			abnf.Repeat0Inf("*par", Par),
		)
	}
	return globalNumber(s, ns)
}

var globalNumberDigits abnf.Operator

// GlobalNumberDigits rule: global-number-digits = "+" *phonedigit DIGIT *phonedigit
func GlobalNumberDigits(s []byte, ns abnf.Nodes) abnf.Nodes {
	if globalNumberDigits == nil {
		globalNumberDigits = abnf.Concat(
			"global-number-digits",
			abnf.Literal("\"+\"", []byte{43}),
			abnf.Repeat0Inf("*phonedigit", Phonedigit),
			abnf_core.DIGIT,
			abnf.Repeat0Inf("*phonedigit", Phonedigit),
		)
	}
	return globalNumberDigits(s, ns)
}

var isdnSubaddress abnf.Operator

// IsdnSubaddress rule: isdn-subaddress = ";isub=" 1*paramchar
func IsdnSubaddress(s []byte, ns abnf.Nodes) abnf.Nodes {
	if isdnSubaddress == nil {
		isdnSubaddress = abnf.Concat(
			"isdn-subaddress",
			abnf.Literal("\";isub=\"", []byte{59, 105, 115, 117, 98, 61}),
			abnf.Repeat1Inf("1*paramchar", Paramchar),
		)
	}
	return isdnSubaddress(s, ns)
}

var localNumber abnf.Operator

// LocalNumber rule: local-number = local-number-digits *par context *par
func LocalNumber(s []byte, ns abnf.Nodes) abnf.Nodes {
	if localNumber == nil {
		localNumber = abnf.Concat(
			"local-number",
			LocalNumberDigits,
			abnf.Repeat0Inf("*par", Par),
			Context,
			abnf.Repeat0Inf("*par", Par),
		)
	}
	return localNumber(s, ns)
}

var localNumberDigits abnf.Operator

// LocalNumberDigits rule: local-number-digits = *phonedigit-hex ( HEXDIG / "*" / "#" ) *phonedigit-hex
func LocalNumberDigits(s []byte, ns abnf.Nodes) abnf.Nodes {
	if localNumberDigits == nil {
		localNumberDigits = abnf.Concat(
			"local-number-digits",
			abnf.Repeat0Inf("*phonedigit-hex", PhonedigitHex),
			abnf.Alt(
				"HEXDIG / \"*\" / \"#\"",
				abnf_core.HEXDIG,
				abnf.Literal("\"*\"", []byte{42}),
				abnf.Literal("\"#\"", []byte{35}),
			),
			abnf.Repeat0Inf("*phonedigit-hex", PhonedigitHex),
		)
	}
	return localNumberDigits(s, ns)
}

var mark abnf.Operator

// Mark rule: mark = "-" / "_" / "." / "!" / "~" / "*" / "'" / "(" / ")"
func Mark(s []byte, ns abnf.Nodes) abnf.Nodes {
	if mark == nil {
		mark = abnf.Alt(
			"mark",
			abnf.Literal("\"-\"", []byte{45}),
			abnf.Literal("\"_\"", []byte{95}),
			abnf.Literal("\".\"", []byte{46}),
			abnf.Literal("\"!\"", []byte{33}),
			abnf.Literal("\"~\"", []byte{126}),
			abnf.Literal("\"*\"", []byte{42}),
			abnf.Literal("\"'\"", []byte{39}),
			abnf.Literal("\"(\"", []byte{40}),
			abnf.Literal("\")\"", []byte{41}),
		)
	}
	return mark(s, ns)
}

var par abnf.Operator

// Par rule: par = extension / isdn-subaddress / parameter
func Par(s []byte, ns abnf.Nodes) abnf.Nodes {
	if par == nil {
		par = abnf.Alt(
			"par",
			Extension,
			IsdnSubaddress,
			Parameter,
		)
	}
	return par(s, ns)
}

var paramUnreserved abnf.Operator

// ParamUnreserved rule: param-unreserved = "[" / "]" / "/" / ":" / "&" / "+" / "$"
func ParamUnreserved(s []byte, ns abnf.Nodes) abnf.Nodes {
	if paramUnreserved == nil {
		paramUnreserved = abnf.Alt(
			"param-unreserved",
			abnf.Literal("\"[\"", []byte{91}),
			abnf.Literal("\"]\"", []byte{93}),
			abnf.Literal("\"/\"", []byte{47}),
			abnf.Literal("\":\"", []byte{58}),
			abnf.Literal("\"&\"", []byte{38}),
			abnf.Literal("\"+\"", []byte{43}),
			abnf.Literal("\"$\"", []byte{36}),
		)
	}
	return paramUnreserved(s, ns)
}

var paramchar abnf.Operator

// Paramchar rule: paramchar = param-unreserved / unreserved / escaped
func Paramchar(s []byte, ns abnf.Nodes) abnf.Nodes {
	if paramchar == nil {
		paramchar = abnf.Alt(
			"paramchar",
			ParamUnreserved,
			Unreserved,
			Escaped,
		)
	}
	return paramchar(s, ns)
}

var parameter abnf.Operator

// Parameter rule: parameter = ";" pname ["=" pvalue ]
func Parameter(s []byte, ns abnf.Nodes) abnf.Nodes {
	if parameter == nil {
		parameter = abnf.Concat(
			"parameter",
			abnf.Literal("\";\"", []byte{59}),
			Pname,
			abnf.Optional("[\"=\" pvalue ]", abnf.Concat(
				"\"=\" pvalue",
				abnf.Literal("\"=\"", []byte{61}),
				Pvalue,
			)),
		)
	}
	return parameter(s, ns)
}

var phonedigit abnf.Operator

// Phonedigit rule: phonedigit = DIGIT / visual-separator
func Phonedigit(s []byte, ns abnf.Nodes) abnf.Nodes {
	if phonedigit == nil {
		phonedigit = abnf.Alt(
			"phonedigit",
			abnf_core.DIGIT,
			VisualSeparator,
		)
	}
	return phonedigit(s, ns)
}

var phonedigitHex abnf.Operator

// PhonedigitHex rule: phonedigit-hex = HEXDIG / "*" / "#" / visual-separator
func PhonedigitHex(s []byte, ns abnf.Nodes) abnf.Nodes {
	if phonedigitHex == nil {
		phonedigitHex = abnf.Alt(
			"phonedigit-hex",
			abnf_core.HEXDIG,
			abnf.Literal("\"*\"", []byte{42}),
			abnf.Literal("\"#\"", []byte{35}),
			VisualSeparator,
		)
	}
	return phonedigitHex(s, ns)
}

var pname abnf.Operator

// Pname rule: pname = 1*( alphanum / "-" )
func Pname(s []byte, ns abnf.Nodes) abnf.Nodes {
	if pname == nil {
		pname = abnf.Repeat1Inf("pname", abnf.Alt(
			"alphanum / \"-\"",
			Alphanum,
			abnf.Literal("\"-\"", []byte{45}),
		))
	}
	return pname(s, ns)
}

var pvalue abnf.Operator

// Pvalue rule: pvalue = 1*paramchar
func Pvalue(s []byte, ns abnf.Nodes) abnf.Nodes {
	if pvalue == nil {
		pvalue = abnf.Repeat1Inf("pvalue", Paramchar)
	}
	return pvalue(s, ns)
}

var reserved abnf.Operator

// Reserved rule: reserved = ";" / "/" / "?" / ":" / "@" / "&" / "=" / "+" / "$" / ","
func Reserved(s []byte, ns abnf.Nodes) abnf.Nodes {
	if reserved == nil {
		reserved = abnf.Alt(
			"reserved",
			abnf.Literal("\";\"", []byte{59}),
			abnf.Literal("\"/\"", []byte{47}),
			abnf.Literal("\"?\"", []byte{63}),
			abnf.Literal("\":\"", []byte{58}),
			abnf.Literal("\"@\"", []byte{64}),
			abnf.Literal("\"&\"", []byte{38}),
			abnf.Literal("\"=\"", []byte{61}),
			abnf.Literal("\"+\"", []byte{43}),
			abnf.Literal("\"$\"", []byte{36}),
			abnf.Literal("\",\"", []byte{44}),
		)
	}
	return reserved(s, ns)
}

var telephoneSubscriber abnf.Operator

// TelephoneSubscriber rule: telephone-subscriber = global-number / local-number
func TelephoneSubscriber(s []byte, ns abnf.Nodes) abnf.Nodes {
	if telephoneSubscriber == nil {
		telephoneSubscriber = abnf.Alt(
			"telephone-subscriber",
			GlobalNumber,
			LocalNumber,
		)
	}
	return telephoneSubscriber(s, ns)
}

var telephoneUri abnf.Operator

// TelephoneUri rule: telephone-uri = "tel:" telephone-subscriber
func TelephoneUri(s []byte, ns abnf.Nodes) abnf.Nodes {
	if telephoneUri == nil {
		telephoneUri = abnf.Concat(
			"telephone-uri",
			abnf.Literal("\"tel:\"", []byte{116, 101, 108, 58}),
			TelephoneSubscriber,
		)
	}
	return telephoneUri(s, ns)
}

var toplabel abnf.Operator

// Toplabel rule: toplabel = ALPHA / ALPHA *( alphanum / "-" ) alphanum
func Toplabel(s []byte, ns abnf.Nodes) abnf.Nodes {
	if toplabel == nil {
		toplabel = abnf.Alt(
			"toplabel",
			abnf_core.ALPHA,
			abnf.Concat(
				"ALPHA *( alphanum / \"-\" ) alphanum",
				abnf_core.ALPHA,
				abnf.Repeat0Inf("*( alphanum / \"-\" )", abnf.Alt(
					"alphanum / \"-\"",
					Alphanum,
					abnf.Literal("\"-\"", []byte{45}),
				)),
				Alphanum,
			),
		)
	}
	return toplabel(s, ns)
}

var unreserved abnf.Operator

// Unreserved rule: unreserved = alphanum / mark
func Unreserved(s []byte, ns abnf.Nodes) abnf.Nodes {
	if unreserved == nil {
		unreserved = abnf.Alt(
			"unreserved",
			Alphanum,
			Mark,
		)
	}
	return unreserved(s, ns)
}

var visualSeparator abnf.Operator

// VisualSeparator rule: visual-separator = "-" / "." / "(" / ")"
func VisualSeparator(s []byte, ns abnf.Nodes) abnf.Nodes {
	if visualSeparator == nil {
		visualSeparator = abnf.Alt(
			"visual-separator",
			abnf.Literal("\"-\"", []byte{45}),
			abnf.Literal("\".\"", []byte{46}),
			abnf.Literal("\"(\"", []byte{40}),
			abnf.Literal("\")\"", []byte{41}),
		)
	}
	return visualSeparator(s, ns)
}
